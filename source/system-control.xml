<?xml version="1.0" encoding="UTF-8"?>
<!-- **************************************************************************
.... For copyright and licensing terms, see the file named COPYING.
.... **************************************************************************
.-->
<?xml-stylesheet href="docbook-xml.css" type="text/css"?>

<refentry id="system-control">

<refmeta xmlns:xi="http://www.w3.org/2001/XInclude">
<refentrytitle>system-control</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="manual">administrator commands</refmiscinfo>
<refmiscinfo class="source">nosh</refmiscinfo>
<xi:include href="version.xml" />
</refmeta>

<refnamediv>
<refname>system-control</refname>
<refname>systemctl</refname>
<refname>initctl</refname>
<refname>svcadm</refname>
<refpurpose>process system control jobs, sending commands to the system manager and service manager</refpurpose>
</refnamediv>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req"><replaceable>command</replaceable></arg>
<arg><replaceable>arguments or options</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>systemctl</command>
<arg choice="req"><replaceable>command</replaceable></arg>
<arg><replaceable>arguments or options</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>initctl</command>
<arg choice="req"><replaceable>command</replaceable></arg>
<arg><replaceable>arguments or options</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>svcadm</command>
<arg choice="req"><replaceable>command</replaceable></arg>
<arg><replaceable>arguments or options</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsection><title>Description</title>

<para>
<command>system-control</command> takes a subcommand as
<replaceable>command</replaceable> that instructs it on what to do.
</para>

<para>
For limited systemd compatibility, it is also available as <command>systemctl</command>.  
Not all subcommands are supported, nor is placing subcommand options before the <replaceable>command</replaceable>.
For similarly limited upstart compatibility, it is also available as <command>initctl</command>.  
For similarly limited SunOS compatibility, it is also available as <command>svcadm</command>.  
</para>

<para>
It operates in one of two modes, controlled by the <arg choice="req">--user</arg> command line option:
</para>

<itemizedlist>
<listitem>
<para>
In "system" mode it operates on system-wide state and services.  
It potentially communicates with a System Manager process, which must be process #1 and which it expects to recognize the same signals as <citerefentry><refentrytitle>system-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry> does.
It potentially communicates with a Service Manager process, such as <citerefentry><refentrytitle>service-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry> via a local domain socket at <filename>/run/service-manager/control</filename> and via the control/status API of the individual services.
</para>
</listitem>
<listitem>
<para>
In "user" mode it operates on per-user state and services.  
It potentially communicates with a Session Manager process, which again it expects to recognize the same signals as <citerefentry><refentrytitle>per-user-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry> does.
It potentially communicates with a Service Manager process, such as <citerefentry><refentrytitle>service-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry> via a local domain socket at <filename>/run/user/<replaceable>$USER</replaceable>/service-manager/control</filename> and via the control/status API of the individual services.
</para>
</listitem>
</itemizedlist>

</refsection>
<refsection><title>Concepts</title>

<refsection><title>Services and targets</title>

<para>
Services and targets are defined by bundle directories.
Although there is no constraint enforced, and <command>system-control</command> simply follows symbolic links, by convention service bundle directories generally live under <filename>/etc/service-bundles/services</filename>, <filename>/run/service-bundles/services</filename>, or <filename>/var/sv</filename>; and target bundle directories generally live under <filename>/etc/service-bundles/targets</filename>.
</para>

<para>
A service is generally a d&#xe6;mon process that runs.
A target is generally a collection of services that are started/stopped together.
</para>

</refsection>
<refsection><title>Jobs and actions</title>

<para>
The <command>start</command> and <command>stop</command> subcommands construct jobs, which comprise a set of actions.
Each action is a start or a stop command to the control API of a service/target.
Jobs are composed by starting with an action on a named service, and then following information in the service bundles to related services and targets.
The service bundles also determine the order in which the actions are taken.
</para>

<para>
A start action simply requests that the service manager bring the service/target to the "running" state, if it isn't already there.
A stop action, however, is more complex.
Initially it requests that the service manager bring the service/target to the "stopped" state (if it isn't already there).
However, if that does not happen within 60 seconds, it requests that the service manager send the <code>SIGKILL</code> signal to the service/target.
</para>

</refsection>

<refsection><title>Bundle directories</title>

<para>
A bundle directory contains the command information, dependency information, relationship information, and control/status API for a service.
It contains various subdirectories (which can be symbolic links to directories elsewhere):
</para>

<itemizedlist>

<listitem>
<para>
The <filename>service/</filename> and <filename>supervise/</filename> subdirectories are (respectively) the service and supervise directories for the service, comprising the command information and the control/status API.
See <citerefentry><refentrytitle>service-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry> for what service and supervise directories contain.
(<citerefentry><refentrytitle>service-dt-scanner</refentrytitle><manvolnum>1</manvolnum></citerefentry> implements a slight extension here, for compatibility.)
</para>
<para>
When bundles are on a read-only filesystem, such as a CD-ROM, <filename>supervise</filename> must be a symbolic link pointing to a directory on a read-write filesystem, since supervise directories must be writable.
One might choose a subdirectory of <filename>/run/service-bundles/early-supervise/</filename> for example.
<command>system-control</command> attempts to create the target of such a symbolic link before attempting to load the service, to avoid a chicken-and-egg situation with "sysinit" services that are set up this way.
</para>
</listitem>

<listitem>
<para>
The <filename>wants/</filename>, <filename>requires/</filename>, <filename>conflicts/</filename>, <filename>wanted-by/</filename>, <filename>stopped-by/</filename>, and <filename>required-by/</filename> subdirectories comprise dependency or dependency installation information.
Each contains a set of symbolic links to other bundle directories for other services.
</para>

<itemizedlist>

<listitem>
<para>
<filename>wants/</filename> contains links to services that the current service "wants".
Starting the current service implies starting the linked-to service as well.
</para>
</listitem>

<listitem>
<para>
<filename>requires/</filename> contains links to services that should be "required-by" the current service when it is enabled.
Enabling the service places it in the targets' "required-by" lists, and disabling the service removes it.
</para>
</listitem>

<listitem>
<para>
<filename>conflicts/</filename> contains links to services that "conflict" with the current service.
Starting the current service implies stopping the linked-to services.
</para>
</listitem>

<listitem>
<para>
<filename>required-by/</filename> contains links to services that "require" the current service.
Stopping the current service implies stopping the linked-to services as well.
</para>
</listitem>

<listitem>
<para>
<filename>wanted-by/</filename> contains links to (standard) targets that should "want" the current service when it is enabled.
Enabling the service places it in the targets' "wants" lists, and disabling the service removes it.
</para>
</listitem>

<listitem>
<para>
<filename>stopped-by/</filename> contains links to (standard) targets that should "conflict" with the current service when it is enabled.
Enabling the service places it in the targets' "conflicts" lists, and disabling the service removes it.
</para>
</listitem>

</itemizedlist>

</listitem>

<listitem>
<para>
The <filename>after/</filename> and <filename>before/</filename> subdirectories comprise relationship information.
Relationships govern the ordering between the individual actions in a start/stop job.
</para>

<itemizedlist>

<listitem>
<para>
<filename>after/</filename> contains links to services that should be started
after/stopped before the current service when executing a start/stop job.
</para>
</listitem>

<listitem>
<para>
<filename>before/</filename> contains links to services that should be started
before/stopped after the current service when executing a start/stop job.
</para>
</listitem>

</itemizedlist>

</listitem>

</itemizedlist>

<para>
Relationships are not the same as dependencies.
A service can "want" another service without having any ordering against it with respect to start/stop actions.
Indeed, this is a common case for system targets.
The <filename>normal</filename> target, for example, "wants" the <filename>server</filename>, <filename>workstation</filename>, <filename>multi-user</filename>, <filename>static-networking</filename> , and <filename>users</filename> targets (and by extension everything that they in their turn "want"), but all of the wanted services are started in parallel with the <filename>normal</filename> target itself.
</para>

<para>
Similarly, a service can be ordered with respect to another service without having a dependency from it.
For example, both "log" and "main" services are "wanted" by the <filename>server</filename> and <filename>workstation</filename> targets, explicitly.
The individual "main" services, therefore, only need to be ordered after their corresponding "log" services, and do not "want" them.
("log" services are first-class citizens in this respect.)
</para>

<para>
There are no implicit relationships or dependencies in a bundle.
The relationships and dependencies are exactly what is explicitly in the filesystem.
<command>system-control</command> will fail if the recorded relationships and dependencies are self-contradictory or impossible (such as a service that conflicts with itself, for example).
</para>

</refsection>

<refsection><title>Bundle search paths and conventional locations</title>

<para>
Several subcommands take a list of bundle <arg rep='repeat' choice='plain'><replaceable>names</replaceable></arg>.
Each <arg choice='plain'><replaceable>name</replaceable></arg> can be the full absolute pathname of a bundle directory or a relative pathname with a directory prefix, in which case it is used as-is, or a bundle directory name without any directory prefix, in which case a set of standard locations is searched for a bundle directory by that name.
The search algorithm is as follows:
</para>

<itemizedlist>
<listitem><para>
A <arg choice='plain'><replaceable>name</replaceable></arg> that ends in <filename>.target</filename> is searched for (sans the <filename>.target</filename> suffix) in the standard locations for target bundles:
</para>
<itemizedlist>
<listitem><para>
System-wide target directories:
</para>
<orderedlist>
<listitem><para><filename>/run/service-bundles/targets/</filename></para></listitem>
<listitem><para><filename>/usr/local/etc/service-bundles/targets/</filename></para></listitem>
<listitem><para><filename>/etc/service-bundles/targets/</filename></para></listitem>
<listitem><para><filename>/usr/local/share/service-bundles/targets/</filename></para></listitem>
<listitem><para><filename>/usr/share/service-bundles/targets/</filename></para></listitem>
<listitem><para><filename>/var/service-bundles/targets/</filename></para></listitem>
</orderedlist>
</listitem>
<listitem><para>
Per-user target directories:
</para>
<orderedlist>
<listitem><para><filename><envar>$XDG_RUNTIME_DIR</envar>/service-bundles/targets/</filename></para></listitem>
<listitem><para><filename><envar>$HOME</envar>/.config/service-bundles/targets/</filename></para></listitem>
</orderedlist>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>
A <arg choice='plain'><replaceable>name</replaceable></arg> that ends in <filename>.service</filename> or <filename>.socket</filename> is searched for (sans those suffixes) in the standard locations for service bundles:
</para>
<itemizedlist>
<listitem><para>
System-wide service directories:
</para>
<orderedlist>
<listitem><para><filename>/run/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/usr/local/etc/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/etc/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/usr/local/share/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/var/local/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/var/local/sv/</filename></para></listitem>
<listitem><para><filename>/usr/share/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/var/service-bundles/services/</filename></para></listitem>
<listitem><para><filename>/var/sv/</filename></para></listitem>
<listitem><para><filename>/var/svc.d/</filename></para></listitem>
<listitem><para><filename>/service/</filename></para></listitem>
</orderedlist>
</listitem>
<listitem><para>
Per-user service directories:
</para>
<orderedlist>
<listitem><para><filename><envar>$XDG_RUNTIME_DIR</envar>/service-bundles/services/</filename></para></listitem>
<listitem><para><filename><envar>$HOME</envar>/.config/service-bundles/services/</filename></para></listitem>
</orderedlist>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>
Any other <arg choice='plain'><replaceable>name</replaceable></arg> is searched for (as-is) in the standard locations for service and for target bundles.
</para></listitem>
</itemizedlist>

<para>
If the path search fails, the <arg choice='plain'><replaceable>name</replaceable></arg> is simply assumed to name a bundle directory in the current directory.
</para>

</refsection>

</refsection>

<refsection><title>Subcommands</title>

<refsection><title>System information subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">version</arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
For compatibility with uses of <command>initctl</command>, the <command>version</command> subcommand displays the (compiled-in) version of the toolset.
It does not contain the string "upstart".
</para>

</refsection>
<refsection><title>System control subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">reboot</arg>
<group choice='opt'><arg choice="plain">-f</arg><arg choice="plain">--force</arg></group>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">halt</arg>
<group choice='opt'><arg choice="plain">-f</arg><arg choice="plain">--force</arg></group>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">powercycle</arg>
<group choice='opt'><arg choice="plain">-f</arg><arg choice="plain">--force</arg></group>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">poweroff</arg>
<group choice='opt'><arg choice="plain">-f</arg><arg choice="plain">--force</arg></group>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">emergency</arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">rescue</arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">normal</arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">init</arg>
<arg choice="opt">--user</arg>
<group choice="opt">
<arg choice="plain">-o</arg>
<arg choice="plain">--update</arg>
</group>
<group choice="opt">
<arg choice="plain">-s</arg>
<arg choice="plain">--single</arg>
</group>
<group choice="opt">
<arg choice="plain">-b</arg>
<arg choice="plain">--emergency</arg>
</group>
<arg choice="opt">-a</arg>
<arg choice="opt">-f</arg>
<arg choice="opt">-z <replaceable>string</replaceable></arg>
<arg rep='repeat'><replaceable>runlevel(s)</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
Those subcommands communicate with the system manager to change system state.
<command>system-control</command> sends a signal to process #1 using the <citerefentry><refentrytitle>kill</refentrytitle><manvolnum>2</manvolnum></citerefentry> system call.
It will fail if it does not have the necessary privileges for sending a signal to that process.
</para>

<table>
<title>The signals for each subcommand:</title>
<thead>
<tr><th>command</th><th>signal</th><th></th></tr>
<tr><th></th><th>on BSD</th><th>on Linux</th></tr>
</thead>
<tbody>
<tr><td><command>halt</command></td><td><code>SIGUSR1</code></td><td><code>SIGRTMIN + 3</code></td></tr>
<tr><td><command>halt</command> <arg choice='plain'>-f</arg></td><td colspan='2' align='center'><code>SIGRTMIN + 13</code></td> </tr>
<tr><td><command>poweroff</command></td><td><code>SIGUSR2</code></td><td><code>SIGRTMIN + 4</code></td></tr>
<tr><td><command>poweroff</command> <arg choice='plain'>-f</arg></td><td colspan='2' align='center'><code>SIGRTMIN + 14</code></td></tr>
<tr><td><command>reboot</command></td><td><code>SIGINT</code></td><td><code>SIGRTMIN + 5</code></td></tr>
<tr><td><command>reboot</command> <arg choice='plain'>-f</arg></td><td colspan='2' align="center"><code>SIGRTMIN + 15</code></td></tr>
<tr><td><command>powercycle</command></td><td><code>SIGWINCH</code></td><td><code>SIGRTMIN + 7</code></td></tr>
<tr><td><command>powercycle</command> <arg choice='plain'>-f</arg></td><td colspan='2' align='center'><code>SIGRTMIN + 17</code></td></tr>
<tr><td><command>emergency</command></td><td colspan='2' align='center'><code>SIGRTMIN + 2</code></td></tr>
<tr><td><command>rescue</command></td><td colspan='2' align='center'><code>SIGRTMIN + 1</code></td></tr>
<tr><td><command>normal</command></td><td colspan='2' align='center'><code>SIGRTMIN + 0</code></td></tr>
<tr><td rowspan='2' valign='center'><command>init</command> <group choice='opt'><arg choice='plain'>2</arg><arg choice='plain'>3</arg><arg choice='plain'>4</arg><arg choice='plain'>5</arg><arg choice='plain'>m</arg><arg choice='plain'>auto</arg></group></td><td colspan='2' align='center'><code>SIGRTMIN + 10</code></td></tr>
<tr><td colspan='2' align='center'><code>SIGRTMIN + 0</code></td></tr>
<tr><td rowspan='2'><command>init</command> <group choice='plain'><arg choice='plain'>1</arg><arg choice='plain'>S</arg><arg choice='plain'>s</arg><arg choice='plain'>single</arg></group></td><td colspan='2' align='center'><code>SIGRTMIN + 10</code></td></tr>
<tr><td colspan='2' align='center'><code>SIGRTMIN + 1</code></td></tr>
<tr><td rowspan='2'><command>init</command> <group choice='plain'><arg choice='plain'>-s</arg></group></td><td><code>SIGRTMIN + 2</code></td><td><code>SIGRTMIN + 10</code></td></tr>
<tr><td></td><td><code>SIGRTMIN + 1</code></td></tr>
<tr><td><command>init</command> <group choice='plain'><arg choice='plain'>-b</arg><arg choice='plain'>b</arg><arg choice='plain'>emergency</arg></group></td><td colspan='2' align='center'><code>SIGRTMIN + 2</code></td></tr>
<tr><td><command>init</command> <group choice='plain'><arg choice='plain'>H</arg><arg choice='plain'>h</arg></group></td><td><code>SIGUSR1</code></td><td><code>SIGRTMIN + 3</code></td> </tr>
<tr><td><command>init</command> <group choice='plain'><arg choice='plain'>C</arg><arg choice='plain'>c</arg></group></td><td><code>SIGWINCH</code></td><td><code>SIGRTMIN + 7</code></td> </tr>
<tr><td><command>init</command> <arg choice='plain'>0</arg></td><td><code>SIGUSR2</code></td><td><code>SIGRTMIN + 4</code></td></tr>
<tr><td><command>init</command> <arg choice='plain'>6</arg></td><td><code>SIGINT</code></td><td><code>SIGRTMIN + 5</code></td></tr>
</tbody>
</table>

<para>
Exactly how the system power cycles, powers off, halts, reboots, switches to normal, emergency, or rescue modes, and so forth is entirely up to whatever is running as process #1, which is expected to be in charge of system state.
These subcommands do nothing except send the signals to command the system manager.
They do not directly enact any system state change themselves.
In part this is because that would open up the possibility of the service manager killing the process that was (partway through) enacting the state changes, if a state change happened to affect the service running the <command>system-control</command> command.
</para>

<para>
The <arg>--force</arg> command line argument is used within the various targets and is intended to cause the system manager to proceed directly to the finalization action.
</para>

<para>
The <command>init</command> subcommand is spawned by <citerefentry><refentrytitle>system-manager</refentrytitle><manvolnum>8</manvolnum></citerefentry> and <citerefentry><refentrytitle>per-user-manager</refentrytitle><manvolnum>8</manvolnum></citerefentry> as their initial action.
They pass it the command line arguments that they themselves were invoked with.
As such, its command line syntax is modelled on what boot loaders and kernels tend to supply to process #1, which is a largely undocumented and non-standardized mixture of old-style runlevels and options.
</para>

<para>
In normal and rescue modes it sends two signals to process #1, instituting a two-phase initialization sequence similar to the <code>FILESYSTEMS</code> milestone mechanism in BSD operating systems.
The first phase, the <code>sysinit</code> target, is expected to initialize as much of the system as necessary so that the second phase, the <code>normal</code> or <code>rescue</code> target, can find all service and target bundles, including those that are not on the root filesystem.
</para>

<para>
There is no <arg choice="plain">q</arg> runlevel.
This is deliberate.
Its use case is running <command>telinit</command> <arg choice="plain">q</arg> after updating <filename>/etc/ttys</filename> or <filename>/etc/inittab</filename>.
Any script that is updating those files and then expecting the system manager to re-read them is not targetting the correct configuration mechanisms, and is in error.
</para>

<para>
LILO, the FreeBSD <citerefentry><refentrytitle>loader</refentrytitle><manvolnum>8</manvolnum></citerefentry>, GRUB, and others may cause <arg choice='plain'>-a</arg> or <arg choice='plain'>-f</arg> options to be passed. 
Their meanings are non-standard, largely or even wholly undocumented, inconsistent across platforms and toolsets, considered obsolete in their original forms, and without application here.
The <arg choice='plain'>-z</arg> option is a dummy space-taker that is also used by such systems.
All three options are ignored.
The <arg choice='plain'>--update</arg> command line option is reserved for future use.
</para>

</refsection>
<refsection><title>job subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<group choice='req'>
<arg choice="plain">start</arg>
<arg choice="plain">activate</arg>
</group>
<arg choice='opt'>--colour</arg>
<arg choice='opt'>--verbose</arg>
<arg choice='opt'>--pretend</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<group choice='req'>
<arg choice="plain">stop</arg>
<arg choice="plain">deactivate</arg>
</group>
<arg choice='opt'>--colour</arg>
<arg choice='opt'>--verbose</arg>
<arg choice='opt'>--pretend</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">isolate</arg>
<arg choice='opt'>--colour</arg>
<arg choice='opt'>--verbose</arg>
<arg choice='opt'>--pretend</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">reset</arg>
<arg choice='opt'>--colour</arg>
<arg choice='opt'>--verbose</arg>
<arg choice='opt'>--pretend</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
These subcommands process one or more jobs, sending messages to the service manager to start or to stop one or more services.
Jobs may also involve invoking any number of configurable actions.
Jobs processing tries to ensure that service dependencies are correctly maintained and processed.
To control services directly and individually without regard for dependencies, use <citerefentry><refentrytitle>service-control</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
</para>

<para>
The <arg choice="plain">--verbose</arg> command line option cause information about actions taken and blocked/unblocked services to be written to standard error as jobs are processed.
If the standard error is a terminal, <command>system-control</command> uses whatever it can find via the <citerefentry><refentrytitle>TerminalCapabilities</refentrytitle><manvolnum>3</manvolnum></citerefentry> library to display various parts of the output in different colours, highlighting different events in different colours.
The <arg choice='plain'>--colour</arg> command line option tells it to do this unconditionally, even if its standard error is not a terminal.
The <arg choice='plain'>--pretend</arg> command line option tells it to only pretend that it is taking actions, and not actually take them.
</para>

<para>
The <command>reset</command> command is intended to be used by package installer programs.
It is translated into either <command>start</command> or <command>stop</command> according to whether the service is enabled or disabled; and can be thought of, if one likes, as "reset to however the service is configured to be at bootstrap".
This allows package installers to remain in blissful ignorance of whether a service should be started or stopped after installing the package for it.
Instead, the package installer simply executes the <command>preset</command> command and then the <command>reset</command> command and the service is started or stopped according to whatever the administrator has chosen.
</para>

<para>
The <command>isolate</command> subcommand exists for compatibility, and is equivalent to <command>start</command>.
</para>

</refsection>
<refsection><title>service autoboot configuration subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">enable</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">disable</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">preset</arg>
<arg choice='opt'>--prefix <replaceable>prefix</replaceable></arg> 
<arg choice='opt'>--no-system</arg> 
<arg choice='opt'>--no-rcconf</arg> 
<arg choice='opt'>--rcconf-file <replaceable>filename</replaceable></arg> 
<arg choice='opt'>--ttys</arg> 
<arg choice='opt'>--dry-run</arg> 
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
These subcommands enable or disable one or more services or targets, so that they do or do not automatically start when one of the standard targets is started and automatically stop when the shutdown standard target is started.
</para>

<para>
Each service bundle specifies a (symbolically linked) list of target bundles in its <filename>wanted-by/</filename> directory.
Usually these will be the <filename>workstation</filename>, <filename>server</filename>, <filename>users</filename>, or <filename>multi-user</filename> standard targets.
For each bundle, enabling the service involves symbolically linking its bundle directory into the target bundle's <filename>wants/</filename> list, and disabling the service involves removing that link.
</para>

<para>
Each service bundle also specifies a (symbolically linked) list of target bundles in its <filename>stopped-by/</filename> directory.
Usually these will be the <filename>shutdown</filename> standard target.
For each bundle, enabling the service involves symbolically linking its bundle directory into the target bundle's <filename>conflicts/</filename> and <filename>after/</filename> lists, and disabling the service involves removing those links.
</para>

<para>
The <command>preset</command> command is intended to be used by package installer programs.
It is translated into either <command>enable</command> or <command>disable</command> according to a system/administrator-supplied preset flag (unless the <arg choice='plain'>--dry-run</arg> command line argument is used, causing it to take no actual action).
This allows package installers to remain in blissful ignorance of whether a service should be enabled or disabled after installing the package for it.
Instead, the package installer simply executes the <command>preset</command> command and the service is set to whatever enabled or disabled status the administrator has chosen.
</para>

<para>
The service/socket/target that is preset is <replaceable>prefix</replaceable><replaceable>name</replaceable>, with <replaceable>prefix</replaceable> specifiable via the <arg choice='plain'>--prefix</arg> command line argument.
Preset information can be taken from one of several sources:
</para>
<itemizedlist>
<listitem><para>
(unless the <arg choice="plain">--no-system</arg> command line option is set) systemd and system-manager preset information given in <filename>*.preset</filename> files.
There are different sets of files for per-user and system-wide service management.
</para>
<itemizedlist>
<listitem><para>
System-wide preset files are located in the following directories:
</para>
<orderedlist>
<listitem><para><filename>/usr/local/etc/system-control/presets/</filename></para></listitem>
<listitem><para><filename>/etc/system-control/presets/</filename></para></listitem>
<listitem><para><filename>/etc/systemd/system-preset/</filename></para></listitem>
<listitem><para><filename>/usr/local/share/system-control/presets/</filename></para></listitem>
<listitem><para><filename>/usr/local/lib/systemd/system-preset/</filename></para></listitem>
<listitem><para><filename>/usr/share/system-control/presets/</filename></para></listitem>
<listitem><para><filename>/usr/lib/systemd/system-preset/</filename></para></listitem>
<listitem><para><filename>/lib/systemd/system-preset/</filename></para></listitem>
</orderedlist>
</listitem>
<listitem><para>
Per-user preset files are located in the following directories:
</para>
<orderedlist>
<listitem><para><filename>/usr/local/etc/system-control/user-presets/</filename></para></listitem>
<listitem><para><filename>/etc/system-control/user-presets/</filename></para></listitem>
<listitem><para><filename>/etc/systemd/user-preset/</filename></para></listitem>
<listitem><para><filename><envar>$HOME</envar>/.config/system-control/presets/</filename></para></listitem>
<listitem><para><filename>/usr/local/share/system-control/user-presets/</filename></para></listitem>
<listitem><para><filename>/usr/local/lib/systemd/user-preset/</filename></para></listitem>
<listitem><para><filename>/usr/share/system-control/user-presets/</filename></para></listitem>
<listitem><para><filename>/usr/lib/systemd/user-preset/</filename></para></listitem>
<listitem><para><filename>/lib/systemd/user-preset/</filename></para></listitem>
</orderedlist>
</listitem>
</itemizedlist>
<para>
<ulink url="http://jdebp.eu./FGA/systemd-documentation-errata.html">Contrary to its doco, systemd has four places for system-wide/user-level preset files</ulink>, which form part of these lists.
In addition to those locations, <command>preset</command> looks in extra directories where systemd presets can be overridden by system-control-specific information; allowing a system administrator or package writer to preset things one way for systemd and another way for the <command>preset</command> command.
These extra directories follow the more conventional scheme of <filename>/etc</filename>, <filename>/usr/share</filename>, and <filename>/usr/local/etc</filename> for administrator-set, operating-system-set, and application-software-set stuff.
</para>
<para>
As with systemd, earlier preset directories override later ones; the contents of files with lexically earlier names override the contents of files with lexically later names; and the default state, in the absence of an explicit preset, is "enabled".
Directives are matched against <replaceable>prefix</replaceable><replaceable>name</replaceable>.
</para></listitem>
<listitem><para>
(unless the <arg choice="plain">--no-rcconf</arg> command line option is set) <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> preset information, specifically the <envar><replaceable>name</replaceable>_enable</envar> variable, interpreting the values <code>true</code>, <code>1</code>, <code>yes</code>, and <code>on</code> as enable, and any other values (including specifically <code>false</code>, <code>0</code>, <code>no</code>, and <code>off</code>) as disable.
<para>
</para>
By default in system-wide mode the <filename>/etc/defaults/rc.conf</filename>, <filename>/etc/rc.conf</filename>, and <filename>/etc/rc.conf.local</filename> files are used, but the <arg choice="plain">--rcconf-file</arg> command line option overrides that list with the single replacement file <replaceable>filename</replaceable>.
The default for per-user mode is the <filename><envar>$HOME</envar>/.config/rc.conf</filename> file.
</para>
<para>
The variable names are matched against just <replaceable>name</replaceable> to allow one to use a main service name as <replaceable>name</replaceable> and combine it with a log service template <replaceable>prefix</replaceable> such as <code>cyclog@</code> or <code>s6-multilog@</code>, on the grounds that traditional <filename>/etc/defaults/rc.conf</filename>, <filename>/etc/rc.conf</filename>, and <filename>/etc/rc.conf.local</filename> contents do not make explicit provision for separate logging services.
</para></listitem>
<listitem><para>
(if the <arg choice="plain">--ttys</arg> command line option is set) <filename>/etc/ttys</filename> preset information, specifically the <code>on</code> and <code>off</code> flags as enable and disable, respectively.
The <code>onifconsole</code> flag is also recognized and processed with reference to the currently active console device (on BSD systems only).
If <filename>/etc/ttys</filename> does not exist, as is usually the case on Linux operating systems, all TTYs default to preset disabled.
</para>
<para>
The terminal names are matched against just <replaceable>name</replaceable>.
This allows one to use an ordinary TTY device name as <replaceable>name</replaceable> and combine it with a "templatized" bundle name <replaceable>prefix</replaceable> such as <code>ttylogin@</code>, <code>getty@</code>, or <code>agetty@</code>.
</para></listitem>
<listitem><para>
(if the <arg choice="plain">--fstab</arg> command line option is set)
<filename>/etc/fstab</filename> preset information, specifically the <code>noauto</code> flag as disable.
</para>
<para>
The device and directory names are matched against just <replaceable>name</replaceable>, after unescaping it.
This allows one to use an ordinary device or directory name as <replaceable>name</replaceable> and combine it with a "templatized" bundle name <replaceable>prefix</replaceable> such as <code>mount@</code>, <code>fsck@</code>, <code>swap@</code>, or <code>dump@</code>.
This is designed in particular for use with service bundles generated by the <command>convert-fstab-services</command> subcommand.
</para></listitem>
</itemizedlist>

</refsection>
<refsection><title>service status/control subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">status</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">show</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">find</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<group choice="req">
<arg choice="plain">try-restart</arg>
<arg choice="plain">try-reload-or-restart</arg>
<arg choice="plain">condrestart</arg>
<arg choice="plain">force-reload</arg>
</group>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">hangup</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">is-active</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">is-loaded</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">is-enabled</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">unload-when-stopped</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
<command>system-control</command> takes each of the <arg rep='repeat'><replaceable>names</replaceable></arg>, searches for the corresponding service bundle directory, constructs a list of directory names, and chains to other commands with those directory names as arguments:
</para>

<table>
<title>status/control commands:</title>
<thead>
<tr><td>subcommand</td><td>chains to</td></tr>
</thead>
<tbody>
<tr><td><command>status</command></td><td>
<citerefentry><refentrytitle>service-status</refentrytitle><manvolnum>1</manvolnum></citerefentry>
</td></tr>
<tr><td><command>show</command></td><td>
<citerefentry><refentrytitle>service-show</refentrytitle><manvolnum>1</manvolnum></citerefentry>
</td></tr>
<tr><td><command>show-json</command></td><td>
<citerefentry><refentrytitle>service-show</refentrytitle><manvolnum>1</manvolnum></citerefentry> <arg choice='plain'>--json</arg>
</td></tr>
<tr><td><command>find</command></td><td>
<citerefentry><refentrytitle>ls</refentrytitle><manvolnum>1</manvolnum></citerefentry> <arg choice='plain'>-1d</arg>
</td></tr>
<tr><td><command>try-restart</command></td><td rowspan="4">
<citerefentry><refentrytitle>service-control</refentrytitle><manvolnum>1</manvolnum></citerefentry> <arg choice='plain'>--terminate</arg>
</td></tr>
<tr><td><command>try-reload-or-restart</command></td></tr>
<tr><td><command>force-reload</command></td></tr>
<tr><td><command>condrestart</command></td></tr>
<tr><td><command>hangup</command></td><td>
<citerefentry><refentrytitle>service-control</refentrytitle><manvolnum>1</manvolnum></citerefentry> <arg choice='plain'>--hangup-main</arg>
</td></tr>
<tr><td><command>unload-when-stopped</command></td><td>
<citerefentry><refentrytitle>service-control</refentrytitle><manvolnum>1</manvolnum></citerefentry> <arg choice='plain'>--exit</arg>
</td></tr>
<tr><td><command>is-active</command></td><td>
<citerefentry><refentrytitle>service-is-up</refentrytitle><manvolnum>1</manvolnum></citerefentry>
</td></tr>
<tr><td><command>is-loaded</command></td><td>
<citerefentry><refentrytitle>service-is-ok</refentrytitle><manvolnum>1</manvolnum></citerefentry>
</td></tr>
<tr><td><command>is-enabled</command></td><td>
<citerefentry><refentrytitle>service-is-enabled</refentrytitle><manvolnum>1</manvolnum></citerefentry>
</td></tr>
</tbody>
</table>

</refsection>
<refsection><title>script conversion subcommand</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">convert-systemd-units</arg>
<arg choice='opt'>--bundle-root <replaceable>root</replaceable></arg> 
<arg choice='opt'>--alt-escape</arg> 
<arg choice='opt'>--etc-bundle</arg> 
<arg choice='opt'>--escape-instance</arg> 
<arg choice='opt'>--escape-prefix</arg> 
<arg choice='opt'>--no-systemd-quirks</arg> 
<arg choice='opt'>--no-generation-comment</arg> 
<group choice='req'>
<arg choice='plain'><replaceable>name</replaceable>.target</arg>
<arg choice='plain'><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.target</arg>
<arg choice='plain'><replaceable>name</replaceable>.socket</arg>
<arg choice='plain'><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.socket</arg>
<arg choice='plain'><replaceable>name</replaceable>.timer</arg>
<arg choice='plain'><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.timer</arg>
<arg choice='plain'><replaceable>name</replaceable>.service</arg>
<arg choice='plain'><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.service</arg>
</group>
</cmdsynopsis>
</refsynopsisdiv>

<para>
This subcommand takes some systemd unit files and generates from them a service bundle in the current directory (or in the <arg choice='plain'><replaceable>root</replaceable></arg> directory) that contains scripts, dependencies, and autoboot dependency configuration information.
The bundle is not enabled by the conversion process, but can be started and enabled as it stands, with the <command>start</command> and <command>preset</command> subcommands, just like any other service bundle.
</para>

<refsection><title>Service, socket, timer, and target units</title>

<para>
The systemd unit files are determined from the argument.
They comprise the main unit file and a collection of snippet files in a related subdirectory whose contents are applied on top of it before conversion.
</para>
<itemizedlist>
<listitem>
<para>
If <filename><replaceable>name</replaceable>.service</filename> is specified, then that service unit file is converted into a service bundle directory named <filename><replaceable>name</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.service</filename> is specified, then the <filename><replaceable>name</replaceable>@.service</filename> service unit file is converted using <replaceable>parameter</replaceable> for parameter substitution into a service bundle directory named <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>@.service.d/<replaceable>snippet</replaceable>.conf</filename> and <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>.target</filename> is specified, then that target unit file is converted into a target bundle directory named <filename><replaceable>name</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>.target.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.target</filename> is specified, then the <filename><replaceable>name</replaceable>@.target</filename> target unit file is converted using <replaceable>parameter</replaceable> for parameter substitution into a target bundle directory named <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>@.target.d/<replaceable>snippet</replaceable>.conf</filename> and <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.target.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>.timer</filename> is specified, then it is combined with a <filename><replaceable>name</replaceable>.service</filename> service unit file to make a service bundle directory named <filename><replaceable>name</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>.timer.d/<replaceable>snippet</replaceable>.conf</filename> and <filename><replaceable>name</replaceable>.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.timer</filename> is specified, then the <filename><replaceable>name</replaceable>@.timer</filename> timer unit file is combined with a <filename><replaceable>name</replaceable>.service</filename> service unit file and converted using <replaceable>parameter</replaceable> for parameter substitution into a service bundle directory named <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>@.timer.d/<replaceable>snippet</replaceable>.conf</filename>, <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.timer.d/<replaceable>snippet</replaceable>.conf</filename>, and <filename><replaceable>name</replaceable>.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>.socket</filename> is specified, and it has <code>Accept=true</code>, then it is combined with a <filename><replaceable>name</replaceable>@.service</filename> service unit file to make a service bundle directory named <filename><replaceable>name</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>.socket.d/<replaceable>snippet</replaceable>.conf</filename> and <filename><replaceable>name</replaceable>@.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>.socket</filename> is specified, and it has <code>Accept=false</code>, then it is combined with a <filename><replaceable>name</replaceable>.service</filename> service unit file to make a service bundle directory named <filename><replaceable>name</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>.socket.d/<replaceable>snippet</replaceable>.conf</filename> and <filename><replaceable>name</replaceable>.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.socket</filename> is specified, and it has <code>Accept=true</code>, then the <filename><replaceable>name</replaceable>@.socket</filename> socket unit file is combined with a <filename><replaceable>name</replaceable>@.service</filename> service unit file and converted using <replaceable>parameter</replaceable> for parameter substitution into a service bundle directory named <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>@.socket.d/<replaceable>snippet</replaceable>.conf</filename>, <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.socket.d/<replaceable>snippet</replaceable>.conf</filename>, and <filename><replaceable>name</replaceable>@.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
<listitem>
<para>
If <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.socket</filename> is specified, and it has <code>Accept=false</code>, then the <filename><replaceable>name</replaceable>@.socket</filename> socket unit file is combined with a <filename><replaceable>name</replaceable>.service</filename> service unit file and converted using <replaceable>parameter</replaceable> for parameter substitution into a service bundle directory named <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>/</filename>.
Snippet files are in <filename><replaceable>name</replaceable>@.socket.d/<replaceable>snippet</replaceable>.conf</filename>, <filename><replaceable>name</replaceable>@<replaceable>parameter</replaceable>.socket.d/<replaceable>snippet</replaceable>.conf</filename>, and <filename><replaceable>name</replaceable>.service.d/<replaceable>snippet</replaceable>.conf</filename>.
</para>
</listitem>
</itemizedlist>

<para>
Files found upon opening to be other than regular files are errors.
</para>

<para>
<replaceable>snippet</replaceable> files that begin with a dot are skipped, and not opened, per the usual convention.
There is no defined ordering for snippet files relative to one another.
The snippet subdirectory is required to be in the same location as the associated unit files.
</para>

<para>
Unit files can reference other services.
The assumption is that all service bundles are under one common <arg choice='plain'><replaceable>root</replaceable></arg> and all target bundles under another; so service-to-service dependencies and orderings can be relative pathnames whilst service-to-target and target-to-service dependencies and orderings have to be absolute pathnames.
The <arg choice='plain'>--etc-bundle</arg> option changes this assumption, such that target bundles are now assumed to be reachable with relative pathnames from the converted service bundle; as is the case for special early bootstrap service bundles that live in <filename>/etc/service-bundles/services/</filename>.
It also forces the bundle to be marked as an <code>EarlySupervise</code> bundle whose <filename>supervise/</filename> directory lives in a tmpfs.
</para>

<refsection><title>Escaping</title>
	 
<para>
The systemd dual escaped+unescaped forms are available in parameter substitution.
</para>
<para>
Normally <replaceable>parameter</replaceable> is taken to be the escaped form and is unescaped during parameter substitution.
This is generally used where <replaceable>parameter</replaceable> represents something in the filesystem, but has had to be pre-escaped in order to result in a service name without pathname components.
If the <arg choice='plain'>--escape-instance</arg> option is used, then <replaceable>parameter</replaceable> is instead taken to be the original, unescaped, form and will be escaped into its service name form.
</para>
<para>
Normally <replaceable>name</replaceable> is taken to be the escaped form and is unescaped during parameter substitution.
If the <arg choice='plain'>--escape-prefix</arg> option is used, then <replaceable>name</replaceable> is instead taken to be the unescaped form and will be escaped into its service name form.
</para>
<para>
The normal escaping algorithm is the conventional systemd one that escapes <filename>/</filename> and <filename>-</filename>.
If the <arg choice='plain'>--alt-escape</arg> option is used, then an alternative escaping algorithm that escapes <filename>/</filename>, <filename>\</filename>, <filename>,</filename>, <filename>:</filename>, and <filename>@</filename> is used instead.
</para>
<para>
The <arg choice='plain'>--alt-escape</arg> and <arg choice='plain'>--escape-instance</arg> options are generally used together, such that the <replaceable>parameter</replaceable> is the unescaped service bundle directory name and the escaped form is (for example) an account name in an account database.
(e.g. The account name <code>ossec_aagentd-log</code> being the scaped form of the <replaceable>parameter</replaceable> in <filename>cyclog@ossec@agentd/</filename>.)
</para>
 
</refsection>

</refsection>
<refsection><title>The limits of automated convertability</title>

<para>
Conversion of every possible systemd unit file to a service bundle requires a human being.
This subcommand converts systemd units that fall within certain bounds, which (given that most services are fairly simple) should be the majority of systemd units in existence.
These bounds are:
</para>

<itemizedlist>

<listitem>
<para>
The service must be a simple, forking, oneshot, or dbus service.
Notify services are not converted.
For best results, avoid having forking services in the first place, and change them into simple services wherever possible.
<citerefentry><refentrytitle>service-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry> has no dealings with a Desktop Bus, so dbus services are treated as simple services.
</para>
</listitem>

<listitem>
<para>
Only TCP, UDP, local domain datagram, local domain stream, local domain sequential packet, FIFO, and netlink datagram sockets are converted.
The <filename>run</filename>/<filename>service</filename> script makes use of <citerefentry><refentrytitle>udp-socket-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>tcp-socket-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>local-datagram-socket-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>local-stream-socket-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>local-seqpacket-socket-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>fifo-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>netlink-datagram-socket-listen</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>tcp-socket-accept</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>local-stream-socket-accept</refentrytitle><manvolnum>1</manvolnum></citerefentry>, and <citerefentry><refentrytitle>local-seqpacket-socket-accept</refentrytitle><manvolnum>1</manvolnum></citerefentry> to spawn services, either to listen to the accepting socket or to respond on connecting sockets.
</para>
</listitem>

<listitem>

<para>
Some of the more esoteric mechanisms, and any undocumented settings, in systemd are not converted.
The converter will print a warning for any setting in the unit files that it does not use for conversion.
These will include:
</para>

<itemizedlist>

<listitem>
<para>
Specialized options for conditionally enabling the service, such as <code>conditionpathexists</code> and <code>conditiondirectorynotempty</code>, are not converted.
These are almost always in practice used to make services run on specific platforms and not on others, or dependent from the presence of installed packages, and should be replaced with hooks into the <command>preset</command> mechanism.
</para>
</listitem>

<listitem>
<para>
Other highly specialized options that even systemd recommends against, such as <code>fsckpassno</code>, are not converted.
</para>
</listitem>

<listitem>
<para>
Specialized options for TTY management, such as <code>standardinput=tty-force</code>, are not converted.
Instead of these, employ the <citerefentry><refentrytitle>vc-get-tty</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>open-controlling-tty</refentrytitle><manvolnum>1</manvolnum></citerefentry>, and related utilities in the <filename>run</filename> script.
</para>
</listitem>

<listitem>
<para>
Only the <code>SIGHUP</code> substitute for <code>SIGTERM</code> via <code>killsignal</code> is converted.
In practice, this is the primary use case in services that are interactive login shells.
</para>
</listitem>

<listitem>
<para>
Linux-only mechanisms such as <code>capabilityboundingset</code> and I/O scheduling are not converted.
This is merely down to a lack of known chaining commands for manipulating those mechanisms.
</para>
</listitem>

</itemizedlist>

</listitem>

</itemizedlist>

</refsection>
<refsection><title>Ideal and quirks mode</title>

<para>
Import can operate in either "ideal" mode or "quirks" mode.
The default is quirks mode, which is the better mode for real systemd unit files.
It replicates several quirks of systemd:
</para>

<itemizedlist>
<listitem><para>
It was undocumented for a long time that systemd always sets the <envar>HOME</envar>, <envar>USER</envar>, and <envar>LOGNAME</envar> environment variables whenever a <code>User=</code> directive says to change the user account.
To this, quirks mode adds the <envar>SHELL</envar> environment variable, even though systemd has not customarily implicitly set that variable too.
Ideal mode does not set these environment variables implicitly, since dedicated user accounts for running services do not necessarily have home directories and suchlike.
</para></listitem>
<listitem><para>
A <code>User=</code> directive specifies setting all of the supplementary groups for a user account in addition to its primary group.
The daemontools convention is to just set the primary group when switching to the dedicated unprivileged account for a service, which is the case in ideal mode.
</para></listitem>
<listitem><para>
It's not documented, but systemd always changes directory when it starts a service.
It explicitly changes to the root directory when no <code>WorkingDirectory=</code> directive is given.
The daemontools convention is for services to be run in their service directories, which is the case in ideal mode.
A small number of d&#xe6;mons have been found to rely upon the undocumented systemd behaviour of being in the root directory.
</para></listitem>
<listitem><para>
A fair few directives can occur in both a socket unit or its associated service unit.
</para></listitem>
<listitem><para>
The default behaviour in systemd in the absence of a <code>Restart=</code> directive is to never auto-restart a service.
The daemontools convention is for services to always auto-restart, this having been the norm since the 1990s; and this is the default in ideal mode.
</para></listitem>
<listitem><para>
For an <code>Accept=no</code> (i.e. listening) socket service, systemd implicitly applies any redirection that is applied to standard output to standard error as well.
So (say) <code>StandardOutput=socket</code> attaches both standard output and standard error to the listening socket.
This coupling is usually not what one wants.
The UCSPI and daemontools norm is for standard error to be independent from standard output and to require its own explicit redirection, which is the case in ideal mode.
</para></listitem>
<listitem><para>
When one is using <code>StandardInput=tty</code>, systemd requires that standard output and error be explicitly directed to the terminal device.
Usually, terminal login services being a very common example of this, one wants all three directed to a terminal.
In ideal mode, the redirection of standard input implies redirecting standard output and error as well.
(Standard error can be retained at its original place with the <code>StandardError=log</code> extension.)
</para></listitem>
</itemizedlist>

<para>
The <arg choice='plain'>--no-systemd-quirks</arg> command line option turns off these systemd quirks and sets "ideal" mode.
Alternatively, one can turn off some quirks with various unit file directives:
</para>

<itemizedlist>
<listitem><para>
The <code>systemdWorkingDirectory=</code> setting (defaulting to <code>true</code> in quirks mode) if <code>false</code> causes the generated bundle to not bother changing directory to the root.
Set this on services and targets where the d&#xe6;mon program is happy to run in the <filename>service</filename> directory.
</para></listitem>
<listitem><para>
The <code>systemdUserEnvironment=</code> setting (defaulting to <code>true</code> in quirks mode) if <code>false</code> causes the generated bundle to not bother setting the user environment variables.
Set this on services and targets where the d&#xe6;mon program has no need for the <envar>HOME</envar>, <envar>USER</envar>, <envar>LOGNAME</envar>, or <envar>SHELL</envar> environment variables.
This is the case for most d&#xe6;mon programs.
</para></listitem>
<listitem><para>
The <code>systemdUserGroups=</code> setting (defaulting to <code>true</code> in quirks mode) if <code>false</code> causes the generated bundle to not bother setting the suplementary user groups.
Set this on services and targets where the d&#xe6;mon program has no need for supplementary group access.
This is the case for almost all d&#xe6;mon programs.
</para></listitem>
</itemizedlist>

</refsection>
<refsection><title>Extensions to the systemd unit syntax</title>

<para>
There are several extensions to the systemd unit specification provided by the conversion process, to allow a unit file to specify things that systemd doesn't have but that service bundles have:
</para>

<itemizedlist>
<listitem><para>
The <code>ExecStart=</code> setting does not require that the program be named with an absolute pathname, unlike systemd.
Generated <filename>run</filename> scripts will use <citerefentry><refentrytitle>nosh</refentrytitle><manvolnum>1</manvolnum></citerefentry>, which searches the <envar>PATH</envar>.
(systemd does not search <envar>PATH</envar>.)
This makes it possible, for example, for a single service unit file to just say <code>ExecStart=cupsd</code> without needing to have two different unit files, one saying <code>ExecStart=/usr/sbin/cupsd</code> for Linux systems and one saying <code>ExecStart=/usr/local/sbin/cupsd</code> for BSD systems.
</para></listitem>
<listitem><para>
The <code>LimitMemory=</code> setting translates to the <arg choice='plain'>-m</arg> option of <citerefentry><refentrytitle>softlimit</refentrytitle><manvolnum>1</manvolnum></citerefentry>, for setting multiple "memory" resource limits in one go.
</para></listitem>
<listitem><para>
The <code>MachineEnvironment=</code> setting (defaulting to <code>false</code>) if <code>true</code> causes the generated bundle to set the machine environment variables with <citerefentry><refentrytitle>machineenv</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>EnvironmentAppendPath=</code> setting acts like <code>Environment</code> except that the specified environment variables are augmented with <citerefentry><refentrytitle>appendpath</refentrytitle><manvolnum>1</manvolnum></citerefentry> rather than replaced.
</para></listitem>
<listitem><para>
The <code>EnvironmentDirectory=</code> setting specifies a directory to be read by <citerefentry><refentrytitle>envdir</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
Set this on a service that is configured via an <filename>envdir</filename> environment directory.
</para></listitem>
<listitem><para>
The <code>FullEnvironmentDirectory=</code> setting specifies that the <arg choice='plain'>--full</arg> command line option to <citerefentry><refentrytitle>envdir</refentrytitle><manvolnum>1</manvolnum></citerefentry> be applied when reading the environment directory.
</para></listitem>
<listitem><para>
The <code>EnvironmentUserOnly=</code> setting (defaulting to <code>false</code>) if <code>true</code> causes the generated bundle to call <citerefentry><refentrytitle>envuidgid</refentrytitle><manvolnum>1</manvolnum></citerefentry> but not <citerefentry><refentrytitle>setuidgid</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
Set this on a service where the main d&#xe6;mon program changes its own process UID and GID, but expects to be told via environment variables what UID and GID to run as.
</para></listitem>
<listitem><para>
The <code>EarlySupervise=</code> setting (defaulting to <code>true</code> for "etc" bundles and <code>false</code> for others) if <code>true</code> causes the generated bundle to use a <filename>supervise</filename> directory in <filename>/run/service-bundles/early-supervise/</filename>.
This is for avoiding access to <filename>/var</filename> before it is mounted, during the bootstrap process, and is mainly used for "sysinit" services and system targets that are in <filename>/etc</filename>.
</para></listitem>
<listitem><para>
The <code>StoppedBy=</code> setting defines a <filename>stopped-by</filename> relationship to other services, stored in the generated bundle.
This is the inverse of the <filename>conflicts</filename> relationship.
By default, unless the <code>DefaultDependencies=false</code> setting is used, services are stopped by the "shutdown" target in addition to anything specified in this setting.
</para></listitem>
<listitem><para>
The <code>JailID=</code> setting specifies the ID of a jail in which to run the service, as if by <citerefentry><refentrytitle>jexec</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>ProcessGroupLeader=</code> setting (defaulting to <code>false</code>) if <code>true</code> causes the generated bundle to run the d&#xe6;mon as a process group leader with <citerefentry><refentrytitle>setpgrp</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>SessionLeader=</code> setting (defaulting to <code>false</code>) if <code>true</code> causes the generated bundle to run the d&#xe6;mon as a session leader with <citerefentry><refentrytitle>setsid</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>TTYPrompt=</code> setting (defaulting to <code>false</code>) if <code>true</code> causes the generated bundle to invoke <citerefentry><refentrytitle>login-prompt</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>BannerLine=</code> setting causes the generated bundle to invoke <citerefentry><refentrytitle>line-banner</refentrytitle><manvolnum>1</manvolnum></citerefentry> to write the specified banner line before d&#xe6;mon invocation.
</para></listitem>
<listitem><para>
The <code>BannerFile=</code> setting causes the generated bundle to invoke <citerefentry><refentrytitle>login-banner</refentrytitle><manvolnum>1</manvolnum></citerefentry> to process the specified banner file(s) before d&#xe6;mon invocation.
</para></listitem>
<listitem><para>
The <code>ExecRestartPre=</code> setting allows one to specify extra commands to be run in the (automatically generated) <filename>restart</filename> script.
</para></listitem>
<listitem><para>
The <code>UCSPIRules=</code> setting (defaulting to <code>false</code>) applies <citerefentry><refentrytitle>ucspi-socket-rules-check</refentrytitle><manvolnum>1</manvolnum></citerefentry> to all accepted connections.
The <code>LogUCSPIRules=</code> setting (defaulting to <code>false</code>) causes <citerefentry><refentrytitle>ucspi-socket-rules-check</refentrytitle><manvolnum>1</manvolnum></citerefentry> to print information about access failures.
</para></listitem>
<listitem><para>
The <code>NUMAInterleave=</code>, <code>NUMAMemBind=</code>, <code>NUMACPUNodeBind=</code>, <code>NUMAPhysCPUBind=</code>, <code>NUMALocalAlloc=</code>, and <code>NUMAPreferred=</code> settings cause the generated bundle to invoke <citerefentry><refentrytitle>numactl</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>JVMVersions=</code>, <code>JVMOperatingSystems=</code>, and <code>JVMManufacturers=</code> settings cause the generated bundle to invoke <citerefentry><refentrytitle>find-matching-jvm</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
Each setting's value is a space-separated list, which is turned into zero or more equivalent command-line options.
</para></listitem>
<listitem><para>
The <code>JVMDefault=</code> setting (defaulting to <code>false</code>) if <code>true</code> causes the generated bundle to invoke <citerefentry><refentrytitle>find-default-jvm</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para></listitem>
<listitem><para>
The <code>StandardError=log</code> setting prevents <code>StandardInput=tty</code> from redirecting standard error.
</para></listitem>
<listitem><para>
The <code>RuntimeDirectoryOwner=<replaceable>user</replaceable></code> and <code>RuntimeDirectoryGroup=<replaceable>group</replaceable></code> settings specify the owning user and group of the runtime directory.
</para></listitem>
<listitem><para>
The <code>AfterMountsFor=<replaceable>directories</replaceable></code> setting defines an <filename>after</filename> relationship to the <filename>mount@</filename> services for each <replaceable>directory</replaceable> and its parents up to but not including the root directory, stored in the generated bundle.
</para></listitem>
<listitem><para>
The <code>WantsMountsFor=<replaceable>directories</replaceable></code> setting defines an <filename>wants</filename> relationship to the <filename>mount@</filename> services for each <replaceable>directory</replaceable> and its parents up to but not including the root directory, stored in the generated bundle.
</para></listitem>
</itemizedlist>

</refsection>

</refsection>
<refsection><title>fstab conversion subcommand</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">convert-fstab-services</arg>
<arg choice='opt'>--etc-bundle</arg> 
<arg choice='opt'>--bundle-root <replaceable>root</replaceable></arg> 
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">write-volume-service-bundle</arg>
<arg choice='opt'>--etc-bundle</arg> 
<arg choice='opt'>--want-fsck</arg> 
<arg choice='opt'>--bundle-root <replaceable>root</replaceable></arg> 
<arg choice="req"><replaceable>fstype</replaceable></arg> 
<arg choice="req"><replaceable>source</replaceable></arg> 
<arg choice="req"><replaceable>directory</replaceable></arg> 
<arg choice="req"><replaceable>options</replaceable></arg> 
</cmdsynopsis>
</refsynopsisdiv>

<para>
The <command>convert-fstab-services</command> subcommand takes the entries in <filename>/etc/fstab</filename> and generates from them a set of service bundles.
</para>

<itemizedlist>

<listitem>
<para>
For each non-swap entry:
</para>

<itemizedlist>
<listitem>
<para>
It acts as if it had run <command>write-volume-service-bundles</command> with the values from the entry.
</para>

<para>
If the entry specifies a "pass" number that is greater than zero, it creates a <filename>fsck@<replaceable>directory</replaceable></filename> bundle.
</para>
</listitem>
</itemizedlist>
</listitem>

<listitem>
<para>
For each swap entry:
</para>

<itemizedlist>
<listitem>
<para>
It always creates a <filename>swap@<replaceable>device</replaceable></filename> bundle.
The bundle is created as <filename>wanted-by/</filename> either the system <code>swapauto.target</code> or the system <code>swaplate.target</code>, so that it is started during autoboot when it is enabled.
The choice depends from whether the entry is marked <code>late</code>.
</para>
<para>
If the entry is marked <code>discard</code> then it creates a bundle that passes the <arg choice='plain'>--discard</arg> flag to <citerefentry><refentrytitle>swapon</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
If the entry is marked <code>pri=<replaceable>N</replaceable></code> then it creates a bundle that passes the <arg choice='plain'>--priority <replaceable>N</replaceable></arg> flag.
</para>
</listitem>
<listitem>
<para>
It always creates a <filename>dump@<replaceable>device</replaceable></filename> bundle.
The bundle is created as <filename>wanted-by/</filename> the system <code>dumpauto.target</code>, so that it is started during autoboot when it is enabled.
</para>
</listitem>
</itemizedlist>
</listitem>

</itemizedlist>

<para>
The <command>write-volume-service-bundles</command> subcommand writes service bundles that contain scripts, dependencies, and autoboot dependency configuration information appropriate for mounting, unmounting, and checking a volume.
</para>

<itemizedlist>
<listitem>
<para>
It always creates a <filename>mount@<replaceable>directory</replaceable></filename> bundle that at service startup mounts <replaceable>source</replaceable> there with the options <replaceable>options</replaceable> (if any) and at service shutdown unmounts it.
(The <filename>auto</filename>, <filename>noauto</filename>, <filename>nofail</filename>, and <filename>_netdev</filename> options have no meaning to the actual mount process and are not passed through to the mount options used in the service bundle.)
</para>
<para>
The bundle is created as <filename>wanted-by/</filename> the system <code>local-fs.target</code> or the system <code>remote-fs.target</code>, depending from the filesystem type <replaceable>fstype</replaceable> and whether the <replaceable>options</replaceable> contains <code>_netdev</code>.
This so that it is started during autoboot when it is enabled.
The list of types that are considered to be "remote" is a superset of the old Debian list from <filename>mountall.sh</filename>, with a few additions from the BSDs.
The <code>_netdev</code> option overrides this list and forces a bundle to be unconditionally considered "remote".
</para>
<para>
If it detects a FUSE mount, it makes the bundle <filename>wants/</filename> and <filename>after/</filename> a bundle to load the FUSE kernel module.
Similarly, if the <replaceable>fstype</replaceable> is <filename>efivarfs</filename>, it makes the bundle <filename>wants/</filename> and <filename>after/</filename> a bundle to load that kernel module.
</para>
<para>
"API" filesystems (see <citerefentry><refentrytitle>system-control</refentrytitle><manvolnum>1</manvolnum></citerefentry>) and the root filesystem are specially handled:
<itemizedlist>
<listitem><para>
They are assumed already mounted by the time that service management starts, and are thus mounted with the "remount"/"update" flag.
</para></listitem>
<listitem><para>
The root is required to remain mounted beyond service management termination, and thus it is merely remounted/updated to read-write at start and to read-only at stop.
</para></listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>
It creates a <filename>fsck@<replaceable>directory</replaceable></filename> bundle if one is wanted.
Any <filename>fsck@<replaceable>directory</replaceable></filename> bundle that is created is ordered <filename>before/</filename> the respective <filename>mount@<replaceable>directory</replaceable></filename> bundle, and is <filename>wanted-by/</filename> it.
So when the bundle is enabled <citerefentry><refentrytitle>fsck</refentrytitle><manvolnum>1</manvolnum></citerefentry> is run (on <replaceable>source</replaceable>) before the volume is actually mounted.
</para>
</listitem>
<listitem>
<para>
It creates a <filename>gbde@<replaceable>source</replaceable></filename> bundle if <replaceable>source</replaceable> ends in <filename>.bde</filename>, removing that suffix to generate the bundle.
Any <filename>gbde@<replaceable>directory</replaceable></filename> bundle that is created is ordered <filename>before/</filename> the respective <filename>fsck@<replaceable>directory</replaceable></filename> and <filename>mount@<replaceable>directory</replaceable></filename> bundle, and is <filename>wanted-by/</filename> them.
So when the bundle is enabled <citerefentry><refentrytitle>gbde</refentrytitle><manvolnum>1</manvolnum></citerefentry> is run (to attach <filename><replaceable>source</replaceable></filename> to <filename><replaceable>source</replaceable>.bde</filename>) before the volume is actually checked and mounted.
</para>
</listitem>
<listitem>
<para>
It creates a <filename>geli@<replaceable>source</replaceable></filename> bundle if <replaceable>source</replaceable> ends in <filename>.eli</filename>, removing that suffixe to generate the bundle.
Any <filename>geli@<replaceable>directory</replaceable></filename> bundle that is created is ordered <filename>before/</filename> the respective <filename>fsck@<replaceable>directory</replaceable></filename> and <filename>mount@<replaceable>directory</replaceable></filename> bundle, and is <filename>wanted-by/</filename> them.
So when the bundle is enabled <citerefentry><refentrytitle>geli</refentrytitle><manvolnum>1</manvolnum></citerefentry> is run (to attach <filename><replaceable>source</replaceable></filename> to <filename><replaceable>source</replaceable>.eli</filename>) before the volume is actually checked and mounted.
</para>
</listitem>
</itemizedlist>

<para>
The bundles generated by these subcommands are written in the current directory (or in the <arg choice='plain'><replaceable>root</replaceable></arg> directory).
They are not enabled by the conversion process, but can be started and enabled as they stand, with the <command>start</command> and <command>preset</command> subcommands, just like any other service bundle.
With <command>preset</command> the <arg choice='plain'>--fstab</arg> option is appropriate of course.
(It is <command>preset</command> that handles the <code>noauto</code> option.)
</para>

<para>
The assumption is that all service bundles are under one common <arg choice='plain'><replaceable>root</replaceable></arg> and all target bundles under another; so service-to-service dependencies and orderings can be relative pathnames whilst service-to-target and target-to-service dependencies and orderings have to be absolute pathnames.
The <arg choice='plain'>--etc-bundle</arg> option changes this assumption, such that target bundles are now assumed to be reachable with relative pathnames from the converted service bundle; as is the case for special early bootstrap service bundles that live in <filename>/etc/service-bundles/services/</filename>.
It also forces the bundle to be marked as an <code>EarlySupervise</code> bundle whose <filename>supervise/</filename> directory lives in a tmpfs.
</para>

</refsection>

<refsection><title>conversion utility subcommand</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">escape</arg>
<arg choice='opt'>--alt-escape</arg> 
<arg choice='opt'>--prefix <replaceable>prefix</replaceable></arg> 
<arg choice="req" rep='repeat'><replaceable>name</replaceable></arg> 
</cmdsynopsis>
</refsynopsisdiv>

<para>
The <command>escape</command> subcommand takes each <replaceable>name</replaceable> and converts it using the escaping rules used in the <command>convert-systemd-units</command> subcommand.
Each escaped <replaceable>name</replaceable> is written to standard output, separated from its predecessor (if any) by a space and prefixed with <replaceable>prefix</replaceable> (which is not escaped).
</para>

<para>
The <arg choice='plain'>--alt-escape</arg> option causes the same selection of an alternative escaping algorithm as with the command line option of the same name for the <command>convert-systemd-units</command> subcommand.
</para>

</refsection>

<refsection><title>Nagios plug-in subcommand</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">nagios-check-service</arg>
<arg choice='opt'>--min-seconds <replaceable>seconds</replaceable></arg> 
<arg choice="opt">--critical-if-below-min</arg>
<arg choice='req' rep='repeat'><replaceable>name</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
This subcommand is intended for use as a Nagios plug-in.
It queries the status API in the bundle directory for service/target <arg choice='plain'><replaceable>name</replaceable></arg>.
</para>

<itemizedlist>
<listitem>
<para>
If the service is up for longer than <arg choice='plain'><replaceable>seconds</replaceable></arg> seconds it returns a Nagios "OK" status.
</para>
</listitem>
<listitem>
<para>
If the service is up, but for less than <arg choice='plain'><replaceable>seconds</replaceable></arg> seconds it returns a Nagios "WARNING" status and prints a line containing the service bundle directory name.
It does the same if the service is still in the process of being loaded by the service manager, or in the starting or stopping states.
The <arg choice="plain">--critical-if-below-min</arg> command line option changes the status returned for such up services to "CRITICAL", but does not alter the treatment of starting or stopping services.
</para>
</listitem>
<listitem>
<para>
If the service is unexpectedly down or unloaded, if the status API reports the service running in the future (because of clock skew somewhere), or if the service is in the failing state, it returns a Nagios "CRITICAL" status and prints a line containing the service bundle directory name.
</para>
</listitem>
</itemizedlist>

</refsection>

<refsection><title>Kernel module management subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">load-kernel-module</arg>
<arg choice='req' rep='repeat'><replaceable>module</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">unload-kernel-module</arg>
<arg choice='req' rep='repeat'><replaceable>module</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
These subcommands provide a minimal operating-system-neutral kernel module loading and unloading mechanism, for use in cross-platform service bundles.
They devolve to the appropriate operating system commands, which are <citerefentry><refentrytitle>kldload</refentrytitle><manvolnum>8</manvolnum></citerefentry> and <citerefentry><refentrytitle>kldunload</refentrytitle><manvolnum>8</manvolnum></citerefentry> on BSD and <citerefentry><refentrytitle>modprobe</refentrytitle><manvolnum>8</manvolnum></citerefentry> (without or with the <arg choice='plain'>--remove</arg> option) on Linux.
</para>

</refsection>
<refsection><title>service program dump subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">cat</arg>
<arg rep='repeat'><replaceable>names</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
<command>system-control</command> takes each of the <arg rep='repeat'><replaceable>names</replaceable></arg>, searches for the corresponding service bundle directory, changes to the corresponding service directory, and runs <citerefentry><refentrytitle>grep</refentrytitle><manvolnum>1</manvolnum></citerefentry> to dump the contents of the <filename>start</filename>, <filename>stop</filename>, <filename>run</filename>, and <filename>restart</filename> files.
</para>

</refsection>
<refsection><title>service environment manipulation subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">set-service-env</arg>
<arg choice="opt">--full</arg>
<arg choice="req"><replaceable>name</replaceable></arg>
<arg choice='req'><replaceable>var</replaceable></arg>
<arg><replaceable>value</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">print-service-env</arg>
<arg choice="opt">--full</arg>
<arg choice="req"><replaceable>name</replaceable></arg>
<arg><replaceable>var</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
If the <arg choice="plain"><replaceable>name</replaceable></arg> service has an environment template subdirectory named <filename>env/</filename> (in the format understood by <citerefentry><refentrytitle>envdir</refentrytitle><manvolnum>1</manvolnum></citerefentry>), these subcommands can be used to manipulate that template.
</para>

<itemizedlist>
<listitem><para>
<command>set-service-env</command> <arg choice="plain"><replaceable>name</replaceable></arg> <arg choice='plain'><replaceable>var</replaceable></arg> <arg choice='plain'><replaceable>value</replaceable></arg> sets <replaceable>var</replaceable> to <replaceable>value</replaceable> in the template, the change not (of course) affecting any currently running service.
</para></listitem>
<listitem><para>
<command>set-service-env</command> <arg choice="plain"><replaceable>name</replaceable></arg> <arg choice='plain'><replaceable>var</replaceable></arg> specifies that the template unset <replaceable>var</replaceable>, the change not (of course) affecting any currently running service.
</para></listitem>
<listitem><para>
<command>print-service-env</command> <arg choice="plain"><replaceable>name</replaceable></arg> <arg choice='plain'><replaceable>var</replaceable></arg> prints (only) the value of <replaceable>var</replaceable> from the template.
</para></listitem>
<listitem><para>
<command>print-service-env</command> <arg choice="plain"><replaceable>name</replaceable></arg> prints the whole template as list of <replaceable>var</replaceable>=<replaceable>value</replaceable> entries.
</para></listitem>
</itemizedlist>

<para>
The <arg choice="plain">--full</arg> command-line option switches to an alternative format for the environment template subdirectory, as understood by <citerefentry><refentrytitle>envdir</refentrytitle><manvolnum>1</manvolnum></citerefentry> when its option of the same name is used.
</para>

</refsection>
<refsection><title>filesystem table query subcommands</title>

<refsynopsisdiv>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">get-mount-what</arg>
<arg ><replaceable>where</replaceable></arg>
</cmdsynopsis>
<cmdsynopsis>
<command>system-control</command>
<arg choice="req">get-mount-where</arg>
<arg ><replaceable>what</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<para>
These subcommands query the <filename>/etc/fstab</filename> database.
They fill a gap left by the <citerefentry><refentrytitle>getent</refentrytitle><manvolnum>1</manvolnum></citerefentry> command, which has no subcommand for reading the filesystem table.
Like that command, they query the on-disc administrative database of what is configured to be mounted; not the kernel's list of currently active mounts.
</para>

<itemizedlist>
<listitem><para>
For a given mount-point <replaceable>where</replaceable> <command>get-mount-what</command> prints the volume that is configured to be mounted upon it.
</para></listitem>
<listitem><para>
For a given volume <replaceable>what</replaceable> <command>get-mount-where</command> prints the point where it is configured to be mounted.
</para></listitem>
</itemizedlist>

</refsection>

</refsection>

<refsection><title>Standard targets</title>

<para>
Several standard targets are defined.
They conventionally live in the <filename>/etc/service-bundles/targets/</filename> directory.
</para>

<refsection><title>startup</title>

<para>
These standard targets are (indirectly) started by the <command>init</command> subcommand.
</para>

<variablelist>

<varlistentry>
<term>
<filename>normal</filename>
</term>
<listitem>
<para>
This target is the normal target started by the <command>init</command> subcommand.
This should bring up with it all of the services involved in the normal operation of the system, and an administrator-defined set of multiple login user interfaces that may include both TUI and GUI login prompts.
</para><para>
It "wants" the <filename>workstation</filename>, <filename>server</filename>, and <filename>multi-user</filename> targets.
Thus starting it starts the union of all services wanted by those targets.
It is not ordered with respect to those targets.
So in the absence of orderings in between the individual services wanted by those targets, defined in their bundles, all wanted workstation, server, and multi-user services are brought up in parallel.
</para>
</listitem>
</varlistentry>

<varlistentry><term><filename>emergency</filename></term>
<listitem><para>
This target is the target started by the <command>init</command> subcommand with the <arg choice='plain'>-b</arg> option.
Starting it is intended to bring up the system in "emergency mode", bringing up no services, mounting no (non-system) volumes, and bringing up just "emergency mode" services, such as a secure login on the default terminal.
</para><para>
It "wants" no other targets or services.
So in "emergency mode" (if nothing else has been started) only the system filesystems are available, and not necessarily even read-write.
</para></listitem>
</varlistentry>

<varlistentry>
<term><filename>rescue</filename></term>
<listitem><para>
This target is the target started by the <command>init</command> subcommand with the <arg choice='plain'>-s</arg> option.
Starting it is intended to bring up the system in "rescue mode", bringing up with it the fundamental system initialization services and a secure login user interface.
</para><para>
It "wants" the <filename>sysinit</filename> target, but not the <filename>basic</filename> target.
</para></listitem>
</varlistentry>

<varlistentry>
<term><filename>update</filename></term>
<listitem><para>
This target is the target started by the <command>init</command> subcommand with the <arg choice='plain'>--update</arg> option.
Starting it is intended to bring up the system in "update mode", bringing up with it the fundamental system initialization services and the system update utility.
</para><para>
It "wants" the <filename>sysinit</filename> target, but not the <filename>basic</filename> target.
</para></listitem>
</varlistentry>

</variablelist>

</refsection>

<refsection><title>shutdown</title>

<para>
The <command>poweroff</command>, <command>powercycle</command>, <command>halt</command>, and <command>reboot</command> subcommands invoke several standard targets indirectly.
</para>

<variablelist>

<varlistentry>
<term><filename>poweroff</filename></term>
<term><filename>powercycle</filename></term>
<term><filename>halt</filename></term>
<term><filename>reboot</filename></term>
<listitem><para>
These four targets both "want" the <filename>shutdown</filename> target and order themselves to start after it.
Thus starting them shuts down all services and then, once this has been done, starts these targets.
They are usually started by the System Manager, in response to system control commands requesting system reboot, halt, or power off.
When they (finally) start, they invoke the <command>reboot</command>, <command>halt</command>, <command>powercycle</command>, and <command>poweroff</command> subcommands of <command>system-control</command> with the <arg choice="req">-f</arg> command-line option.
This signals the System Manager to enact the actual reboot, halt, power-cycle, or power-off action.
</para></listitem>
</varlistentry>

</variablelist>

<para>
For example: When
<citerefentry><refentrytitle>system-manager</refentrytitle><manvolnum>8</manvolnum></citerefentry> 
is process #1, system halt operates as follows:
</para>

<orderedlist>
<listitem>
<para>
The superuser runs <command>system-control</command> <arg choice='req'>halt</arg>.
This sends <code>SIGUSR1</code> (on BSD) or <code>SIGRTMIN + 3</code> (on Linux) to the system manager process.
</para>
</listitem>
<listitem>
<para>
In response to that signal, the system manager runs <command>system-control</command> <arg choice='req'>activate</arg> <arg choice="plain">halt</arg>.
</para>
</listitem>
<listitem>
<para>
<command>system-control</command> does everything necessary for activating the <filename>halt</filename> target, including stopping all other (conflicting) services and targets.
In the service control ordering starting the <filename>halt</filename> target comes after processing every other service, because of the ordering between <filename>halt</filename> and <filename>shutdown</filename> and between <filename>shutdown</filename> and everything else.
</para>
</listitem>
<listitem>
<para>
When the <filename>halt</filename> target is finally started it runs <command>system-control</command> <arg choice='req'>halt</arg> <arg choice="req">-f</arg>.
This sends <code>SIGRTMIN + 13</code> to the system manager process.
</para>
</listitem>
<listitem>
<para>
In response to that signal, the system manager performs the finalization action of actually telling the operating system kernel to halt the system, after various standard system shutdown actions such as flushing the filesystem cache.
</para>
</listitem>
</orderedlist>

<para>
Other standard targets are started by <citerefentry><refentrytitle>telinit</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para>

<variablelist>

</variablelist>

</refsection>

<refsection><title>service collections</title>

<para>
User-supplied services and targets that are auto-started at system bootstrap should list themselves in the <filename>wants/</filename> and <filename>conflicts/</filename> lists of subordinate targets (via the <command>enable</command> and <command>disable</command> subcommands).
These targets are usually not started explicitly.
</para>

<variablelist>

<varlistentry><term><filename>workstation</filename></term>
<listitem><para>
All services that normally form part of bringing the system up as a "workstation" should be listed in this target's <filename>wants/</filename> list.
Such services will include things such as the <citerefentry><refentrytitle>cron</refentrytitle><manvolnum>1</manvolnum></citerefentry> d&#xe6;mon.
This target "wants" the <filename>basic</filename> target, so starting it (directly or indirectly) will bring the basic system up.
It is a collection that is used to group services, but is not an ordering milestone and has no <filename>before/</filename> or <filename>after/</filename> relationships.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>server</filename></term>
<listitem><para>
All services that normally form part of bringing the system up as a "server" should be listed in this target's <filename>wants/</filename> list.
Such services will include things such as HTTP/FTP/SMTP d&#xe6;mons, and d&#xe6;mons that provide services over the network.
This target "wants" the <filename>basic</filename> target, so starting it (directly or indirectly) will bring the basic system up.
It is a collection that is used to group services, but is not an ordering milestone and has no <filename>before/</filename> or <filename>after/</filename> relationships.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>multi-user</filename></term>
<listitem><para>
All services that normally form part of bringing up multi-user logins should be listed in this target's <filename>wants/</filename> list.
Such services will include things such as the login services for terminals (real and virtual) and X.
This target "wants" the <filename>basic</filename> target, so starting it (directly or indirectly) will bring the basic system up.
It is a collection that is used to group services, but is not an ordering milestone and has no <filename>before/</filename> or <filename>after/</filename> relationships.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>shutdown</filename></term>
<listitem><para>
Starting this target is intended to shut down all running normal services.
All normal services should be in this target's <filename>conflicts/</filename> list.
It is also an ordering milestone, in that all services listed in its <filename>conflicts/</filename> list should also be listed in its <filename>after/</filename> list.
<filename>shutdown</filename> is then listed in the <filename>after/</filename> list of the <filename>poweroff</filename>, <filename>powercycle</filename>, <filename>halt</filename>, and <filename>reboot</filename> target to ensure that they are only started after the system has entered "shutdown mode".
</para></listitem>
</varlistentry>

<varlistentry><term><filename>unmount</filename></term>
<listitem><para>
Starting this target is intended to unmount all filesystems, both local and remote.
All <filename>mount@*</filename> services should be in this target's <filename>conflicts/</filename> list.
<filename>unmount</filename> is then listed in the <filename>after/</filename> list of the <filename>poweroff</filename>, <filename>powercycle</filename>, <filename>halt</filename>, and <filename>reboot</filename> target to ensure that they are only started after the system has unmounted all filesystems.
</para></listitem>
</varlistentry>

</variablelist>

</refsection>

<refsection><title>core subordinate targets</title>

<para>
Core services and targets are incorporated into a set of further subordinate targets.
</para>

<variablelist>

<varlistentry><term><filename>basic</filename></term>
<listitem><para>
This target implies the "basic" system, excluding all workstation, server, and multi-user services.
It "wants" the <filename>sysinit</filename> target.
It is a collection that is used to group services, but is not an ordering milestone and has no <filename>before/</filename> or <filename>after/</filename> relationships.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>static-networking</filename></term>
<listitem><para>
This target implies the static setup/teardown of network interfaces and routing.
It "wants" all of the generated <filename>static_<replaceable>protocol</replaceable>@<replaceable>id</replaceable></filename> services.
It is a collection that is used to group services, but is not an ordering milestone and has no <filename>before/</filename> or <filename>after/</filename> relationships.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>sysinit</filename></term>
<listitem><para>
All fundamental system initialization services and steps should be listed in this target's <filename>wants/</filename> list.
Such services will include things such as the <filename>hostname</filename> service that runs <citerefentry><refentrytitle>set-dynamic-hostname</refentrytitle><manvolnum>1</manvolnum></citerefentry>, the <filename>machine-id</filename> service that runs <citerefentry><refentrytitle>setup-machine-id</refentrytitle><manvolnum>1</manvolnum></citerefentry>, the <filename>local-fs</filename> target, and the <filename>remote-fs</filename> target.
It is a collection that is used to group all such services, but is not an ordering milestone and has no <filename>before/</filename> or <filename>after/</filename> relationships.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>local-fs</filename></term>
<listitem><para>
This "local filesystems" target is an ordering milestone and a collection, in that all services listed in its <filename>wants/</filename> list should also be listed in its <filename>after/</filename> list.
All system initialization services and steps for checking and mounting local filesystems, including remounting the root filesystem in read-write mode, should be in those lists.
One can thus list <filename>local-fs</filename> in the <filename>after/</filename> list of a service or target to ensure that it is only brought up after local filesystems have been mounted and checked.
</para>
<para>
Note that services encompassed by this target may not rely upon filesystems being checked and mounted, nor upon the root filesystem being mounted read-write.
To handle the latter, in particular, their <filename>supervise/</filename> subdirectories should be symbolic links to a suitable subdirectory of <filename>/run/service-bundles/early-supervise</filename>.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>remote-fs</filename></term>
<listitem><para>
This "remote filesystems" target is an ordering milestone and a collection, in that all services listed in its <filename>wants/</filename> list should also be listed in its <filename>after/</filename> list.
All system initialization services and steps for checking and mounting remote filesystems should be in those lists.
One can thus list <filename>remote-fs</filename> in the <filename>after/</filename> list of a service or target to ensure that it is only brought up after remote filesystems have been mounted and checked.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>local-fs-pre</filename></term>
<listitem><para>
This "local filesystems precursor" target is not a collection; its <filename>wants/</filename> list should be empty.
It is solely an ordering milestone, that is brought in only if the services that want to order before it are themselves brought in.
It exists because system initialization services that need to occur before any filesystem checks or mounts, usually special services that initialize an interactive UI for <citerefentry><refentrytitle>fsck</refentrytitle><manvolnum>1</manvolnum></citerefentry>, do not have another way to hold the checks/mounts from commencing until they are done.
Such services should list this target in their <filename>before/</filename> and <filename>wants/</filename> lists.
Local filesystem checks, decryptions, and mounts should list this target (only) in their <filename>after/</filename> lists, so that they order relative to it if the target is brought in but do not themselves bring it in.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>fs-servers</filename></term>
<listitem><para>
This "filesystems servers" target is not a collection; its <filename>wants/</filename> list should be empty.
It is solely an ordering milestone, that is brought in only if the services that want to order after it are themselves brought in.
It exists in order to ensure that remote filesystem mounts of volumes on the local machine work, by ordering them after the startup of any filesystem servers (e.g. SAMBA or NFS server d&#xe6;mons).
Such server services should list this target (only) in their <filename>before/</filename> and <filename>wants/</filename> lists.
Remote filesystem mounts should list this target (only) in their <filename>after/</filename> lists, so that they order relative to it if the target is brought in but do not themselves bring it in.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>multi-user-pre</filename></term>
<listitem><para>
This "multi-user precursor" target is not a collection; its <filename>wants/</filename> list should be empty.
It is solely an ordering milestone, that is brought in only if the <filename>multi-user</filename> target is brought in.
It exists for services that need to start/execute before any multi-user login.
Such services should list this target (only) in their <filename>before/</filename> lists.
Login services should list this target (only) in their <filename>after/</filename> lists.
This is so that they order relative to it if the target is brought in but do not themselves bring it in.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>name-services</filename></term>
<listitem><para>
This target is not a collection.
It is solely an ordering milestone, that is brought in only when the services that want to order before it are themselves brought in.
It exists because some name/address services lookup clients cannot be caused via the client-server communications mechanism itself to block indefinitely until the server is ready; and so have to have an explicit ordering to order them after any respective servers.
One lists <filename>name-services</filename> in the <filename>after/</filename> list of a service or target to ensure that it is only brought up after such name/address lookup services are available.
By not including it in their <filename>wants/</filename> lists, however, they do not themselves being it in if there are no name/address lookup services that require hard ordering.
All services that are involved in providing local name/address lookup services should be listed in its <filename>after/</filename> and its <filename>wants/</filename> lists.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>databases</filename></term>
<listitem><para>
This "database servers" target is not a collection; its <filename>wants/</filename> list should be empty.
It is solely an ordering milestone, that is brought in only when the services that want to order after it are themselves brought in.
It exists because some database clients cannot be caused via the client-server communications mechanism itself to block indefinitely until the server is ready; and so have to have an explicit ordering to order them after any respective servers.
One lists <filename>databases</filename> in the <filename>wants/</filename> and <filename>after/</filename> lists of a service or target.
The former ensures that they themselves bring it in if there are database services that require hard ordering.
The latter ensures that they are only brought up after such database services are available.
All services that are involved in providing database services should list it in their <filename>before/</filename> lists.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>swapauto</filename></term>
<listitem><para>
This target is a collection that is wanted by "sysinit"; it is not an ordering milestone.
All "auto" "swap" services should be listed in its <filename>wants/</filename> lists.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>swaplate</filename></term>
<listitem><para>
This target is a collection that is wanted by "sysinit"; it is not an ordering milestone.
All "late" "swap" services should be listed in its <filename>wants/</filename> lists.
</para></listitem>
</varlistentry>

<varlistentry><term><filename>dumpauto</filename></term>
<listitem><para>
This target is a collection that is wanted by "sysinit"; it is not an ordering milestone.
All "dump" services should be listed in its <filename>wants/</filename> lists.
</para></listitem>
</varlistentry>

<varlistentry>
<term><filename>finish-install</filename></term>
<term><filename>finish-update</filename></term>
<listitem><para>
These targets "wants" the various services that finish a system install or a system upgrade.
They are collections that are used to group services, but are not ordering milestones.
</para></listitem>
</varlistentry>

<varlistentry>
<term><filename>reboot-after-install</filename></term>
<term><filename>reboot-after-update</filename></term>
<listitem><para>
These target <filename>wants/</filename> the <filename>reboot</filename> target.
They are ordering milestones, with all <filename>finish-install</filename>/<filename>finish-update</filename> services expected to order themselves <filename>before/</filename> these targets.
</para></listitem>
</varlistentry>

</variablelist>

</refsection>

</refsection>

<refsection><title>Author</title>
<para><author><personname><firstname>Jonathan</firstname> <surname>de Boyne Pollard</surname></personname></author></para>
</refsection>

</refentry>
